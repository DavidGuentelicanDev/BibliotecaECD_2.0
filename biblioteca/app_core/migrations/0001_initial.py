# Generated by Django 5.1.1 on 2024-09-19 20:37

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Editorial',
            fields=[
                ('id_editorial', models.SmallAutoField(primary_key=True, serialize=False)),
                ('nombre_editorial', models.CharField(max_length=50, unique=True)),
                ('informacion_editorial', models.TextField(blank=True, null=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='Pais',
            fields=[
                ('id_pais', models.SmallAutoField(primary_key=True, serialize=False)),
                ('nombre_pais', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('rut', models.CharField(max_length=10, unique=True)),
                ('telefono', models.CharField(blank=True, max_length=15, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Libro',
            fields=[
                ('codigo', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('titulo', models.CharField(max_length=100)),
                ('subtitulo', models.CharField(blank=True, max_length=100, null=True)),
                ('resena', models.TextField(blank=True, null=True)),
                ('categoria', models.PositiveSmallIntegerField(choices=[(1, 'Novela'), (2, 'Poesía'), (3, 'Cuentos'), (4, 'Dramaturgia'), (5, 'Cartas'), (6, 'Ensayo'), (7, 'Filosofía'), (8, 'Historia'), (9, 'Atlas y Enciclopedias')])),
                ('portada', models.ImageField(blank=True, null=True, upload_to='')),
                ('estado_libro', models.PositiveSmallIntegerField(choices=[(1, 'Recepcionado - En proceso'), (2, 'Disponible'), (3, 'Reservado'), (4, 'Prestado'), (5, 'Devuelto - En proceso'), (6, 'En reparación'), (7, 'Extraviado temporalmente'), (8, 'Perdido')], default=1)),
                ('editorial', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_core.editorial')),
            ],
        ),
        migrations.AddField(
            model_name='editorial',
            name='pais',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_core.pais'),
        ),
        migrations.CreateModel(
            name='Autor',
            fields=[
                ('id_autor', models.SmallAutoField(primary_key=True, serialize=False)),
                ('nombre_autor', models.CharField(max_length=50, unique=True)),
                ('pseudonimo', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('informacion_autor', models.TextField(blank=True, null=True)),
                ('imagen', models.ImageField(blank=True, null=True, upload_to='')),
                ('pais', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_core.pais')),
            ],
        ),
        migrations.CreateModel(
            name='Reserva',
            fields=[
                ('numero', models.AutoField(primary_key=True, serialize=False)),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
                ('cantidad_libros', models.PositiveSmallIntegerField(default=0)),
                ('fecha_confirmacion', models.DateField(blank=True, null=True)),
                ('fecha_compromiso', models.DateField(blank=True, null=True)),
                ('fecha_lista_retiro', models.DateField(blank=True, null=True)),
                ('fecha_maxima_retiro', models.DateField(blank=True, null=True)),
                ('fecha_retiro', models.DateField(blank=True, null=True)),
                ('fecha_maxima_devolucion', models.DateField(blank=True, null=True)),
                ('fecha_devolucion', models.DateField(blank=True, null=True)),
                ('fecha_cancelacion', models.DateField(blank=True, null=True)),
                ('estado_reserva', models.PositiveSmallIntegerField(choices=[(1, 'Provisoria'), (2, 'Confirmada'), (3, 'Lista para retiro'), (4, 'Retirada'), (5, 'Devuelta'), (6, 'Cancelada')], default=1)),
                ('ultima_actualizacion', models.DateTimeField(auto_now=True)),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AutorPorLibro',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('autor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_core.autor')),
                ('libro', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_core.libro')),
            ],
            options={
                'unique_together': {('libro', 'autor')},
            },
        ),
        migrations.CreateModel(
            name='DetalleReserva',
            fields=[
                ('id_detalle_reserva', models.BigAutoField(primary_key=True, serialize=False)),
                ('libro', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_core.libro')),
                ('reserva', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_core.reserva')),
            ],
            options={
                'unique_together': {('reserva', 'libro')},
            },
        ),
    ]
